// Stub generated by FactoryMaker

package tree;

import compiler.QType;
import parser.*;

public class CreateExpressionNode extends QNode implements QParserTreeConstants {
	public CreateExpressionNode() {
		super(JJTCREATEEXPRESSION);
	}

	void initialize() {
		switch (firstToken.kind) {
		case CREATEINTARRAY:
		case CREATEREALARRAY:
		case CREATEBOOLEANARRAY:
		case CREATEPMFARRAY:
		case CREATEINTERFACEARRAY:
			checkParameters(1);
			break;

		case CREATEINTMATRIX:
		case CREATEREALMATRIX:
		case CREATEBOOLEANMATRIX:
		case CREATEPMFMATRIX:
		case CREATEINTERFACEMATRIX:
			checkParameters(2);
			break;
		}
	
		switch (firstToken.kind) {
		case CREATEINTARRAY:
			_type = QType.INTARRAY;
			break;
		case CREATEREALARRAY:
			_type = QType.REALARRAY;
			break;
		case CREATEBOOLEANARRAY:
			_type = QType.BOOLEANARRAY;
			break;
		case CREATEPMFARRAY:
			_type = QType.PMFARRAY;
			break;
		case CREATEINTERFACEARRAY:
			_type = QType.INTERFACEARRAY;
			break;

		case CREATEINTMATRIX:
			_type = QType.INTMATRIX;
			break;
		case CREATEREALMATRIX:
			_type = QType.REALMATRIX;
			break;
		case CREATEBOOLEANMATRIX:
			_type = QType.BOOLEANMATRIX;
			break;
		case CREATEPMFMATRIX:
			_type = QType.PMFMATRIX;
			break;
		case CREATEINTERFACEMATRIX:
			_type = QType.INTERFACEMATRIX;
			break;
		}

	}

	void checkParameters(int requiredNumberOfInts) {
		QNode expressionList = getChild(0);
		if (expressionList.jjtGetNumChildren() != requiredNumberOfInts)
			throw new CompileException("Expected " + requiredNumberOfInts + " arguments", expressionList);
	
		for (int i = 0; i < expressionList.jjtGetNumChildren(); i++)
			if (expressionList.getChild(i)._type != QType.INT)
				throw new CompileException("Expected an int", expressionList.getChild(i));
	}
}
