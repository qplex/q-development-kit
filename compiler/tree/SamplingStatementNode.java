// Stub generated by FactoryMaker

package tree;

import compiler.Category;
import compiler.Engine;
import compiler.QType;
import compiler.Qualifier;
import compiler.Symbol;
import compiler.SymbolTable.SymbolAlreadyDeclaredException;
import parser.*;

public class SamplingStatementNode extends QNode implements QParserTreeConstants {
	public SamplingStatementNode() {
		super(JJTSAMPLINGSTATEMENT);
	}

	void initialize() {
		QNode identifierListNode = getChild(0);
		QNode rhs = getChild(1);

		if (rhs._type._kind != PMF)
			throw new CompileException("Must sample from a Pmf", rhs);
		
		if (rhs._type._qualifier._category == Qualifier.Category.COMPOUND)
			throw new CompileException("Cannot sample from a compound Pmf", rhs);
			
		int numberOfSamples = (identifierListNode.getTokenAndNodeCount()+1)/2;
		int rhsDimension = rhs._type._qualifier._simpleRVNames.size();
		if (numberOfSamples > rhsDimension)
			throw new CompileException("Number of samples must equal number of RVs in distribution", rhs);
		
		_samplingCount = _samplingDepth = numberOfSamples;

		for (int i=0; i<_samplingCount; i++) {
			Symbol symbol = new Symbol();
			symbol._name = identifierListNode.getToken(2*i).image;
			symbol._node = identifierListNode;
			symbol._type = QType.INT;
			symbol._category = Category.SAMPLE;
			
			try {
				Engine._instance._symbolTable.add(symbol);
			} catch (SymbolAlreadyDeclaredException e) {
				throw new CompileException("Duplicate symbol definition", identifierListNode.getToken(i));
			}
		}
	}
}
